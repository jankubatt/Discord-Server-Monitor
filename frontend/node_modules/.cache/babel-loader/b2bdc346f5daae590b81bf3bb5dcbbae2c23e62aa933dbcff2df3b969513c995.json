{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morpheus\\\\Projects\\\\discord-activity\\\\frontend\\\\src\\\\components\\\\StatusChart.js\";\nimport React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusColors = {\n  online: 'green',\n  offline: 'grey',\n  idle: 'orange',\n  dnd: 'red'\n};\nconst StatusChart = ({\n  chartData,\n  numOfUsers\n}) => {\n  // // Create a mapping of usernames to numerical indices\n  // const usernameToIndex = chartData.reduce((acc, cur, index) => {\n  //   acc[cur.username] = index%(chartData.length-numOfUsers);\n  //   return acc;\n  // }, {});\n\n  // // Replace usernames in chartData with their corresponding indices\n  // const processedChartData = chartData.map(entry => ({\n  //   ...entry,\n  //   username: usernameToIndex[entry.username]\n  // }));\n\n  // const CustomTooltip = ({ active, payload, label }) => {\n  //   if (active && payload && payload.length) {\n  //     return (\n  //       <div className=\"custom-tooltip\">\n  //         <p>{`Time: ${new Date(payload[0].value).toLocaleString(\"cs\")}`}</p>\n  //         <p>{`Username: ${Object.keys(usernameToIndex).find(key => usernameToIndex[key] === payload[1].value)}`}</p>\n  //         <p>{`Status: ${payload[2].value}`}</p>\n  //       </div>\n  //     );\n  //   }\n\n  //   return null;\n  // };\n\n  // return (\n  //   <ResponsiveContainer width = '95%' height = {500} >\n  //   <ScatterChart>\n  //     <XAxis\n  //       dataKey = 'timestamp'\n  //       domain = {['auto', 'auto']}\n  //       name = 'Time'\n  //       type = 'number'\n  //       tickFormatter = {(unixTime) => moment(unixTime).format('HH:mm Do')}\n  //     />\n  //     <YAxis \n  //       dataKey = 'username' \n  //       type='number' \n  //       ticks={Object.values(usernameToIndex)}\n  //       tickFormatter={(index) => Object.keys(usernameToIndex).find(key => usernameToIndex[key] === index)} // Display actual usernames\n\n  //     />\n  //     <ZAxis type=\"category\" dataKey=\"status\" />\n  //     <Tooltip content={<CustomTooltip />}  cursor={{ strokeDasharray: '3 3' }} />\n\n  //     {Object.keys(statusColors).map((status) => (\n  //       <Scatter\n  //         key={status}\n  //         data={processedChartData.filter((entry) => entry.status === status)}\n  //         fill={statusColors[status]}\n  //         shape=\"circle\"\n  //       />\n  //     ))}\n  //   </ScatterChart>\n\n  // </ResponsiveContainer>\n  // );\n\n  // Sample data\n  const data = [{\n    name: \"A\",\n    x: 30,\n    y: 70\n  }, {\n    name: \"B\",\n    x: 12,\n    y: 88\n  }, {\n    name: \"C\",\n    x: 15,\n    y: 85\n  }, {\n    name: \"D\",\n    x: 35,\n    y: 65\n  }, {\n    name: \"E\",\n    x: 54,\n    y: 46\n  }, {\n    name: \"F\",\n    x: 72,\n    y: 28\n  }, {\n    name: \"G\",\n    x: 32,\n    y: 68\n  }];\n  return /*#__PURE__*/_jsxDEV(BarChart, {\n    width: 500,\n    height: 500,\n    data: data,\n    children: [/*#__PURE__*/_jsxDEV(CartesianGrid, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"name\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Legend, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      dataKey: \"x\",\n      stackId: \"a\",\n      fill: \"aqua\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(Bar, {\n      dataKey: \"y\",\n      stackId: \"a\",\n      fill: \"green\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n_c = StatusChart;\nexport default StatusChart;\nvar _c;\n$RefreshReg$(_c, \"StatusChart\");","map":{"version":3,"names":["React","ScatterChart","Scatter","XAxis","YAxis","ZAxis","Tooltip","Legend","ResponsiveContainer","moment","jsxDEV","_jsxDEV","statusColors","online","offline","idle","dnd","StatusChart","chartData","numOfUsers","data","name","x","y","BarChart","width","height","children","CartesianGrid","fileName","_jsxFileName","lineNumber","columnNumber","dataKey","Bar","stackId","fill","_c","$RefreshReg$"],"sources":["C:/Users/morpheus/Projects/discord-activity/frontend/src/components/StatusChart.js"],"sourcesContent":["import React from 'react';\r\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport moment from 'moment';\r\n\r\nconst statusColors = {\r\n  online: 'green',\r\n  offline: 'grey',\r\n  idle: 'orange',\r\n  dnd: 'red',\r\n};\r\n\r\n\r\n\r\nconst StatusChart = ({chartData, numOfUsers}) => {\r\n  // // Create a mapping of usernames to numerical indices\r\n  // const usernameToIndex = chartData.reduce((acc, cur, index) => {\r\n  //   acc[cur.username] = index%(chartData.length-numOfUsers);\r\n  //   return acc;\r\n  // }, {});\r\n\r\n  // // Replace usernames in chartData with their corresponding indices\r\n  // const processedChartData = chartData.map(entry => ({\r\n  //   ...entry,\r\n  //   username: usernameToIndex[entry.username]\r\n  // }));\r\n\r\n  // const CustomTooltip = ({ active, payload, label }) => {\r\n  //   if (active && payload && payload.length) {\r\n  //     return (\r\n  //       <div className=\"custom-tooltip\">\r\n  //         <p>{`Time: ${new Date(payload[0].value).toLocaleString(\"cs\")}`}</p>\r\n  //         <p>{`Username: ${Object.keys(usernameToIndex).find(key => usernameToIndex[key] === payload[1].value)}`}</p>\r\n  //         <p>{`Status: ${payload[2].value}`}</p>\r\n  //       </div>\r\n  //     );\r\n  //   }\r\n  \r\n  //   return null;\r\n  // };\r\n\r\n  // return (\r\n  //   <ResponsiveContainer width = '95%' height = {500} >\r\n  //   <ScatterChart>\r\n  //     <XAxis\r\n  //       dataKey = 'timestamp'\r\n  //       domain = {['auto', 'auto']}\r\n  //       name = 'Time'\r\n  //       type = 'number'\r\n  //       tickFormatter = {(unixTime) => moment(unixTime).format('HH:mm Do')}\r\n  //     />\r\n  //     <YAxis \r\n  //       dataKey = 'username' \r\n  //       type='number' \r\n  //       ticks={Object.values(usernameToIndex)}\r\n  //       tickFormatter={(index) => Object.keys(usernameToIndex).find(key => usernameToIndex[key] === index)} // Display actual usernames\r\n        \r\n  //     />\r\n  //     <ZAxis type=\"category\" dataKey=\"status\" />\r\n  //     <Tooltip content={<CustomTooltip />}  cursor={{ strokeDasharray: '3 3' }} />\r\n\r\n  //     {Object.keys(statusColors).map((status) => (\r\n  //       <Scatter\r\n  //         key={status}\r\n  //         data={processedChartData.filter((entry) => entry.status === status)}\r\n  //         fill={statusColors[status]}\r\n  //         shape=\"circle\"\r\n  //       />\r\n  //     ))}\r\n  //   </ScatterChart>\r\n\r\n  // </ResponsiveContainer>\r\n  // );\r\n\r\n  // Sample data\r\n  const data = [\r\n    { name: \"A\", x: 30, y: 70 },\r\n    { name: \"B\", x: 12, y: 88 },\r\n    { name: \"C\", x: 15, y: 85 },\r\n    { name: \"D\", x: 35, y: 65 },\r\n    { name: \"E\", x: 54, y: 46 },\r\n    { name: \"F\", x: 72, y: 28 },\r\n    { name: \"G\", x: 32, y: 68 }\r\n];\r\n\r\nreturn (\r\n    <BarChart width={500} height={500} data={data} >\r\n        <CartesianGrid />\r\n        <XAxis dataKey=\"name\" />\r\n        <YAxis />\r\n        <Tooltip />\r\n        <Legend />\r\n        <Bar dataKey=\"x\" stackId=\"a\" fill=\"aqua\" />\r\n        <Bar dataKey=\"y\" stackId=\"a\" fill=\"green\" />\r\n    </BarChart>\r\n);\r\n};\r\n\r\nexport default StatusChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}