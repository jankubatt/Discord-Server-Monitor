{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morpheus\\\\Projects\\\\discord-activity\\\\frontend\\\\src\\\\components\\\\StatusChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatusChart = ({\n  data\n}) => {\n  _s();\n  const [chartData, setChartData] = useState({});\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Replace 'your_api_endpoint' with the actual endpoint to fetch your data\n        const presencesData = data;\n\n        // Convert timestamp to datetime for better plotting\n        presencesData.forEach(entry => {\n          entry.timestamp = new Date(entry.timestamp);\n        });\n\n        // Sort by timestamp for the plot\n        presencesData.sort((a, b) => a.timestamp - b.timestamp);\n\n        // Define a color palette for the statuses\n        const statusColors = {\n          online: 'green',\n          offline: 'grey',\n          idle: 'orange',\n          dnd: 'red'\n        };\n\n        // Create datasets for each unique username\n        const datasets = Array.from(new Set(presencesData.map(entry => entry.username))).map(username => {\n          const dataPoints = presencesData.filter(entry => entry.username === username).map(entry => ({\n            x: entry.timestamp,\n            y: entry.status\n          }));\n          return {\n            label: username,\n            data: dataPoints,\n            borderColor: statusColors[dataPoints[0].y],\n            borderWidth: 2,\n            pointRadius: 6,\n            pointBackgroundColor: statusColors[dataPoints[0].y],\n            pointHoverRadius: 8\n          };\n        });\n\n        // Set chart data\n        setChartData({\n          datasets\n        });\n      } catch (error) {\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(Line, {\n      data: chartData,\n      options: {\n        scales: {\n          x: [{\n            type: 'time',\n            time: {\n              unit: 'day' // You can adjust the time unit as needed\n            },\n\n            title: {\n              display: true,\n              text: 'Timestamp'\n            }\n          }],\n          y: [{\n            title: {\n              display: true,\n              text: 'Status'\n            },\n            type: 'category'\n          }]\n        },\n        legend: {\n          display: true,\n          position: 'top'\n        },\n        responsive: true\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_s(StatusChart, \"qLlYZUJv3crif/0xI+dehEQf0o0=\");\n_c = StatusChart;\nexport default StatusChart;\nvar _c;\n$RefreshReg$(_c, \"StatusChart\");","map":{"version":3,"names":["React","useEffect","useState","Line","jsxDEV","_jsxDEV","StatusChart","data","_s","chartData","setChartData","fetchData","presencesData","forEach","entry","timestamp","Date","sort","a","b","statusColors","online","offline","idle","dnd","datasets","Array","from","Set","map","username","dataPoints","filter","x","y","status","label","borderColor","borderWidth","pointRadius","pointBackgroundColor","pointHoverRadius","error","console","children","options","scales","type","time","unit","title","display","text","legend","position","responsive","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/morpheus/Projects/discord-activity/frontend/src/components/StatusChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Line } from 'react-chartjs-2';\r\n\r\nconst StatusChart = ({data}) => {\r\n  const [chartData, setChartData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      try {\r\n        // Replace 'your_api_endpoint' with the actual endpoint to fetch your data\r\n        const presencesData = data;\r\n  \r\n        // Convert timestamp to datetime for better plotting\r\n        presencesData.forEach((entry) => {\r\n          entry.timestamp = new Date(entry.timestamp);\r\n        });\r\n  \r\n        // Sort by timestamp for the plot\r\n        presencesData.sort((a, b) => a.timestamp - b.timestamp);\r\n  \r\n        // Define a color palette for the statuses\r\n        const statusColors = {\r\n          online: 'green',\r\n          offline: 'grey',\r\n          idle: 'orange',\r\n          dnd: 'red',\r\n        };\r\n  \r\n        // Create datasets for each unique username\r\n        const datasets = Array.from(new Set(presencesData.map((entry) => entry.username))).map(\r\n          (username) => {\r\n            const dataPoints = presencesData\r\n              .filter((entry) => entry.username === username)\r\n              .map((entry) => ({\r\n                x: entry.timestamp,\r\n                y: entry.status,\r\n              }));\r\n  \r\n            return {\r\n              label: username,\r\n              data: dataPoints,\r\n              borderColor: statusColors[dataPoints[0].y],\r\n              borderWidth: 2,\r\n              pointRadius: 6,\r\n              pointBackgroundColor: statusColors[dataPoints[0].y],\r\n              pointHoverRadius: 8,\r\n            };\r\n          }\r\n        );\r\n  \r\n        // Set chart data\r\n        setChartData({\r\n          datasets,\r\n        });\r\n      } catch (error) {\r\n        console.error('Error fetching data:', error);\r\n      }\r\n    };\r\n  \r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <Line\r\n        data={chartData}\r\n        options={{\r\n          scales: {\r\n            x: [\r\n              {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'day', // You can adjust the time unit as needed\r\n                },\r\n                title: {\r\n                  display: true,\r\n                  text: 'Timestamp',\r\n                },\r\n              },\r\n            ],\r\n            y: [\r\n              {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Status',\r\n                },\r\n                type: 'category',\r\n              },\r\n            ],\r\n          },\r\n          legend: {\r\n            display: true,\r\n            position: 'top',\r\n          },\r\n          responsive: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}