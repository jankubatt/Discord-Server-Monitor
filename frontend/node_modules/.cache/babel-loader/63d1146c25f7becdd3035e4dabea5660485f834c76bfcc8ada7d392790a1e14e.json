{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morpheus\\\\Projects\\\\discord-activity\\\\frontend\\\\src\\\\components\\\\StatusChart.js\";\nimport React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend } from 'recharts';\nimport moment from 'moment'; // Import moment for formatting timestamps\n\n// Assuming presencesData is the data received from the API or some other source\n// Make sure to convert timestamp to a JavaScript Date object\n\n// Define a color palette for the statuses\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusColors = {\n  online: 'green',\n  offline: 'grey',\n  idle: 'orange',\n  dnd: 'red'\n};\nconst StatusChart = () => {\n  const presencesData = [{\n    \"username\": \"majjushka\",\n    \"status\": \"idle\",\n    \"timestamp\": 1000\n  }, {\n    \"username\": \"majjushka\",\n    \"status\": \"online\",\n    \"timestamp\": 2000\n  }, {\n    \"username\": \"majjushka\",\n    \"status\": \"dnd\",\n    \"timestamp\": 3000\n  }, {\n    \"username\": \"t\",\n    \"status\": \"idle\",\n    \"timestamp\": 1000\n  }, {\n    \"username\": \"t\",\n    \"status\": \"online\",\n    \"timestamp\": 2000\n  }, {\n    \"username\": \"t\",\n    \"status\": \"dnd\",\n    \"timestamp\": 3000000\n  }];\n  return /*#__PURE__*/_jsxDEV(ScatterChart, {\n    width: 800,\n    height: 400,\n    margin: {\n      top: 20,\n      right: 30,\n      left: 20,\n      bottom: 10\n    },\n    children: [/*#__PURE__*/_jsxDEV(XAxis, {\n      dataKey: \"timestamp\",\n      domain: ['auto', 'auto'],\n      name: \"Time\",\n      tickFormatter: unixTime => moment(unixTime).format('MM. DD. HH:mm'),\n      type: \"number\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n      dataKey: \"username\",\n      type: \"category\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n      type: \"category\",\n      dataKey: \"status\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n      cursor: {\n        strokeDasharray: '3 3'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), Object.keys(statusColors).map(status => /*#__PURE__*/_jsxDEV(Scatter, {\n      data: presencesData.filter(entry => entry.status === status).slice(0, 1000),\n      fill: statusColors[status],\n      shape: \"circle\"\n    }, status, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 9\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 5\n  }, this);\n};\n_c = StatusChart;\nexport default StatusChart;\nvar _c;\n$RefreshReg$(_c, \"StatusChart\");","map":{"version":3,"names":["React","ScatterChart","Scatter","XAxis","YAxis","ZAxis","Tooltip","Legend","moment","jsxDEV","_jsxDEV","statusColors","online","offline","idle","dnd","StatusChart","presencesData","width","height","margin","top","right","left","bottom","children","dataKey","domain","name","tickFormatter","unixTime","format","type","fileName","_jsxFileName","lineNumber","columnNumber","cursor","strokeDasharray","Object","keys","map","status","data","filter","entry","slice","fill","shape","_c","$RefreshReg$"],"sources":["C:/Users/morpheus/Projects/discord-activity/frontend/src/components/StatusChart.js"],"sourcesContent":["import React from 'react';\r\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend } from 'recharts';\r\nimport moment from 'moment';  // Import moment for formatting timestamps\r\n\r\n// Assuming presencesData is the data received from the API or some other source\r\n// Make sure to convert timestamp to a JavaScript Date object\r\n\r\n// Define a color palette for the statuses\r\nconst statusColors = {\r\n  online: 'green',\r\n  offline: 'grey',\r\n  idle: 'orange',\r\n  dnd: 'red',\r\n};\r\n\r\nconst StatusChart = () => {\r\n    const presencesData = [\r\n        {\r\n            \"username\": \"majjushka\",\r\n            \"status\": \"idle\",\r\n            \"timestamp\": 1000\r\n          },\r\n          {\r\n            \"username\": \"majjushka\",\r\n            \"status\": \"online\",\r\n            \"timestamp\": 2000\r\n          },\r\n\r\n          {\r\n            \"username\": \"majjushka\",\r\n            \"status\": \"dnd\",\r\n            \"timestamp\": 3000\r\n          },\r\n\r\n          {\r\n            \"username\": \"t\",\r\n            \"status\": \"idle\",\r\n            \"timestamp\": 1000\r\n          },\r\n          {\r\n            \"username\": \"t\",\r\n            \"status\": \"online\",\r\n            \"timestamp\": 2000\r\n          },\r\n\r\n          {\r\n            \"username\": \"t\",\r\n            \"status\": \"dnd\",\r\n            \"timestamp\": 3000000\r\n          },\r\n          \r\n    ]\r\n  return (\r\n    <ScatterChart\r\n      width={800}\r\n      height={400}\r\n      margin={{ top: 20, right: 30, left: 20, bottom: 10 }}\r\n    >\r\n      <XAxis\r\n        dataKey = 'timestamp'\r\n        domain = {['auto', 'auto']}\r\n        name = 'Time'\r\n        tickFormatter = {(unixTime) => moment(unixTime).format('MM. DD. HH:mm')}\r\n        type = 'number'\r\n      />\r\n      <YAxis dataKey=\"username\" type=\"category\" />\r\n      <ZAxis type=\"category\" dataKey=\"status\"  />\r\n      <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n\r\n      {Object.keys(statusColors).map((status) => (\r\n        <Scatter\r\n          key={status}\r\n          data={presencesData.filter((entry) => entry.status === status).slice(0, 1000)}\r\n          fill={statusColors[status]}\r\n          shape=\"circle\"\r\n        />\r\n      ))}\r\n    </ScatterChart>\r\n  );\r\n};\r\n\r\nexport default StatusChart;\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}