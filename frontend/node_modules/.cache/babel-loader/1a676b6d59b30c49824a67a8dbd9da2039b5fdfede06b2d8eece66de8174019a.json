{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morpheus\\\\Projects\\\\discord-activity\\\\frontend\\\\src\\\\components\\\\StatusChart.js\";\nimport React from 'react';\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\nimport moment from 'moment';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst statusColors = {\n  online: 'green',\n  offline: 'grey',\n  idle: 'orange',\n  dnd: 'red'\n};\nconst StatusChart = ({\n  chartData\n}) => {\n  // Create an array of unique usernames in the order they appear in chartData\n  const usernames = [...new Set(chartData.map(entry => entry.username))];\n\n  // Replace usernames in chartData with their corresponding indices\n  const processedChartData = chartData.map(entry => ({\n    ...entry,\n    username: usernames.indexOf(entry.username)\n  }));\n  return /*#__PURE__*/_jsxDEV(ResponsiveContainer, {\n    width: \"95%\",\n    height: 1000,\n    children: [/*#__PURE__*/_jsxDEV(ScatterChart, {\n      children: [/*#__PURE__*/_jsxDEV(XAxis, {\n        dataKey: \"timestamp\",\n        domain: ['auto', 'auto'],\n        name: \"Time\",\n        type: \"number\",\n        tickFormatter: unixTime => moment(unixTime).format('HH:mm Do')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(YAxis, {\n        dataKey: \"username\",\n        type: \"number\",\n        tickFormatter: index => usernames[index] // Display actual usernames\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(ZAxis, {\n        type: \"category\",\n        dataKey: \"status\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Tooltip, {\n        cursor: {\n          strokeDasharray: '3 3'\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 7\n      }, this), Object.keys(statusColors).map(status => /*#__PURE__*/_jsxDEV(Scatter, {\n        data: processedChartData.filter(entry => entry.status === status).slice(0, 100),\n        fill: statusColors[status],\n        shape: \"circle\"\n      }, status, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 5\n    }, this), console.log(Object.values(usernameToIndex))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 5\n  }, this);\n};\n_c = StatusChart;\nexport default StatusChart;\nvar _c;\n$RefreshReg$(_c, \"StatusChart\");","map":{"version":3,"names":["React","ScatterChart","Scatter","XAxis","YAxis","ZAxis","Tooltip","Legend","ResponsiveContainer","moment","jsxDEV","_jsxDEV","statusColors","online","offline","idle","dnd","StatusChart","chartData","usernames","Set","map","entry","username","processedChartData","indexOf","width","height","children","dataKey","domain","name","type","tickFormatter","unixTime","format","fileName","_jsxFileName","lineNumber","columnNumber","index","cursor","strokeDasharray","Object","keys","status","data","filter","slice","fill","shape","console","log","values","usernameToIndex","_c","$RefreshReg$"],"sources":["C:/Users/morpheus/Projects/discord-activity/frontend/src/components/StatusChart.js"],"sourcesContent":["import React from 'react';\r\nimport { ScatterChart, Scatter, XAxis, YAxis, ZAxis, Tooltip, Legend, ResponsiveContainer } from 'recharts';\r\nimport moment from 'moment';\r\n\r\nconst statusColors = {\r\n  online: 'green',\r\n  offline: 'grey',\r\n  idle: 'orange',\r\n  dnd: 'red',\r\n};\r\n\r\nconst StatusChart = ({chartData}) => {\r\n  // Create an array of unique usernames in the order they appear in chartData\r\n  const usernames = [...new Set(chartData.map(entry => entry.username))];\r\n\r\n  // Replace usernames in chartData with their corresponding indices\r\n  const processedChartData = chartData.map(entry => ({\r\n    ...entry,\r\n    username: usernames.indexOf(entry.username)\r\n  }));\r\n\r\n\r\n  return (\r\n    <ResponsiveContainer width = '95%' height = {1000} >\r\n    <ScatterChart>\r\n      <XAxis\r\n        dataKey = 'timestamp'\r\n        domain = {['auto', 'auto']}\r\n        name = 'Time'\r\n        type = 'number'\r\n        tickFormatter = {(unixTime) => moment(unixTime).format('HH:mm Do')}\r\n      />\r\n      <YAxis \r\n    dataKey = 'username' \r\n    type='number' \r\n    tickFormatter={(index) => usernames[index]} // Display actual usernames\r\n  />\r\n      <ZAxis type=\"category\" dataKey=\"status\" />\r\n      <Tooltip cursor={{ strokeDasharray: '3 3' }} />\r\n\r\n      {Object.keys(statusColors).map((status) => (\r\n        <Scatter\r\n          key={status}\r\n          data={processedChartData.filter((entry) => entry.status === status).slice(0, 100)}\r\n          fill={statusColors[status]}\r\n          shape=\"circle\"\r\n        />\r\n      ))}\r\n    </ScatterChart>\r\n{console.log(Object.values(usernameToIndex))}\r\n\r\n  </ResponsiveContainer>\r\n  );\r\n};\r\n\r\nexport default StatusChart;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}