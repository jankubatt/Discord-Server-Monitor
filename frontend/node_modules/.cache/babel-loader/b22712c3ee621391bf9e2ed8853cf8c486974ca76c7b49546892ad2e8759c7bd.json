{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\morpheus\\\\Projects\\\\discord-activity\\\\frontend\\\\src\\\\components\\\\StatusChart.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { Scatter } from 'react-chartjs-2';\nimport { getColor } from './utils'; // You need to implement getColor function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst StatusChart = ({\n  inputData\n}) => {\n  _s();\n  const [data, setData] = useState(inputData);\n  useEffect(() => {\n    // Load your data here and transform it as needed\n    // Example: fetch('your-data-endpoint').then(response => response.json()).then(data => setData(data));\n    // Ensure to sort and format your data similarly to the original Python code\n\n    // Example data structure:\n    const exampleData = [{\n      timestamp: '2023-01-01T12:00:00',\n      username: 'user1',\n      status: 'online'\n    }\n    // Add more data as needed\n    ];\n\n    // Transform the data to fit the Chart.js format\n    const transformedData = {\n      labels: Array.from(new Set(exampleData.map(entry => entry.username))),\n      datasets: exampleData.map(entry => ({\n        label: entry.username,\n        data: [{\n          x: entry.timestamp,\n          y: entry.username\n        }],\n        borderColor: getColor(entry.status),\n        backgroundColor: getColor(entry.status),\n        pointStyle: 'circle',\n        pointRadius: 8,\n        pointHoverRadius: 10\n      }))\n    };\n    setData(transformedData);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: data && /*#__PURE__*/_jsxDEV(Scatter, {\n      data: data,\n      options: {\n        scales: {\n          x: {\n            type: 'time',\n            time: {\n              unit: 'day'\n            },\n            title: {\n              display: true,\n              text: 'Timestamp'\n            }\n          },\n          y: {\n            title: {\n              display: true,\n              text: 'Username'\n            }\n          }\n        },\n        plugins: {\n          legend: {\n            position: 'top',\n            labels: {\n              usePointStyle: true\n            }\n          }\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(StatusChart, \"DX4gjk+39TZFz6Pmfh/QUB0hOe8=\");\n_c = StatusChart;\nexport default StatusChart;\nvar _c;\n$RefreshReg$(_c, \"StatusChart\");","map":{"version":3,"names":["React","useEffect","useState","Scatter","getColor","jsxDEV","_jsxDEV","StatusChart","inputData","_s","data","setData","exampleData","timestamp","username","status","transformedData","labels","Array","from","Set","map","entry","datasets","label","x","y","borderColor","backgroundColor","pointStyle","pointRadius","pointHoverRadius","children","options","scales","type","time","unit","title","display","text","plugins","legend","position","usePointStyle","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/morpheus/Projects/discord-activity/frontend/src/components/StatusChart.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { Scatter } from 'react-chartjs-2';\r\nimport { getColor } from './utils'; // You need to implement getColor function\r\n\r\nconst StatusChart = ({inputData}) => {\r\n    const [data, setData] = useState(inputData)\r\n  useEffect(() => {\r\n    // Load your data here and transform it as needed\r\n    // Example: fetch('your-data-endpoint').then(response => response.json()).then(data => setData(data));\r\n    // Ensure to sort and format your data similarly to the original Python code\r\n\r\n    // Example data structure:\r\n    const exampleData = [\r\n      { timestamp: '2023-01-01T12:00:00', username: 'user1', status: 'online' },\r\n      // Add more data as needed\r\n    ];\r\n\r\n    // Transform the data to fit the Chart.js format\r\n    const transformedData = {\r\n      labels: Array.from(new Set(exampleData.map((entry) => entry.username))),\r\n      datasets: exampleData.map((entry) => ({\r\n        label: entry.username,\r\n        data: [{ x: entry.timestamp, y: entry.username }],\r\n        borderColor: getColor(entry.status),\r\n        backgroundColor: getColor(entry.status),\r\n        pointStyle: 'circle',\r\n        pointRadius: 8,\r\n        pointHoverRadius: 10,\r\n      })),\r\n    };\r\n\r\n    setData(transformedData);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      {data && (\r\n        <Scatter\r\n          data={data}\r\n          options={{\r\n            scales: {\r\n              x: {\r\n                type: 'time',\r\n                time: {\r\n                  unit: 'day',\r\n                },\r\n                title: {\r\n                  display: true,\r\n                  text: 'Timestamp',\r\n                },\r\n              },\r\n              y: {\r\n                title: {\r\n                  display: true,\r\n                  text: 'Username',\r\n                },\r\n              },\r\n            },\r\n            plugins: {\r\n              legend: {\r\n                position: 'top',\r\n                labels: {\r\n                  usePointStyle: true,\r\n                },\r\n              },\r\n            },\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default StatusChart;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,QAAQ,QAAQ,SAAS,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,WAAW,GAAGA,CAAC;EAACC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGT,QAAQ,CAACM,SAAS,CAAC;EAC7CP,SAAS,CAAC,MAAM;IACd;IACA;IACA;;IAEA;IACA,MAAMW,WAAW,GAAG,CAClB;MAAEC,SAAS,EAAE,qBAAqB;MAAEC,QAAQ,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAS;IACxE;IAAA,CACD;;IAED;IACA,MAAMC,eAAe,GAAG;MACtBC,MAAM,EAAEC,KAAK,CAACC,IAAI,CAAC,IAAIC,GAAG,CAACR,WAAW,CAACS,GAAG,CAAEC,KAAK,IAAKA,KAAK,CAACR,QAAQ,CAAC,CAAC,CAAC;MACvES,QAAQ,EAAEX,WAAW,CAACS,GAAG,CAAEC,KAAK,KAAM;QACpCE,KAAK,EAAEF,KAAK,CAACR,QAAQ;QACrBJ,IAAI,EAAE,CAAC;UAAEe,CAAC,EAAEH,KAAK,CAACT,SAAS;UAAEa,CAAC,EAAEJ,KAAK,CAACR;QAAS,CAAC,CAAC;QACjDa,WAAW,EAAEvB,QAAQ,CAACkB,KAAK,CAACP,MAAM,CAAC;QACnCa,eAAe,EAAExB,QAAQ,CAACkB,KAAK,CAACP,MAAM,CAAC;QACvCc,UAAU,EAAE,QAAQ;QACpBC,WAAW,EAAE,CAAC;QACdC,gBAAgB,EAAE;MACpB,CAAC,CAAC;IACJ,CAAC;IAEDpB,OAAO,CAACK,eAAe,CAAC;EAC1B,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEV,OAAA;IAAA0B,QAAA,EACGtB,IAAI,iBACHJ,OAAA,CAACH,OAAO;MACNO,IAAI,EAAEA,IAAK;MACXuB,OAAO,EAAE;QACPC,MAAM,EAAE;UACNT,CAAC,EAAE;YACDU,IAAI,EAAE,MAAM;YACZC,IAAI,EAAE;cACJC,IAAI,EAAE;YACR,CAAC;YACDC,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF,CAAC;UACDd,CAAC,EAAE;YACDY,KAAK,EAAE;cACLC,OAAO,EAAE,IAAI;cACbC,IAAI,EAAE;YACR;UACF;QACF,CAAC;QACDC,OAAO,EAAE;UACPC,MAAM,EAAE;YACNC,QAAQ,EAAE,KAAK;YACf1B,MAAM,EAAE;cACN2B,aAAa,EAAE;YACjB;UACF;QACF;MACF;IAAE;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EACF;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvC,EAAA,CAnEIF,WAAW;AAAA0C,EAAA,GAAX1C,WAAW;AAqEjB,eAAeA,WAAW;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}